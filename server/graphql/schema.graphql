type User {
  _id: String!
  name: String
  wallet: String
  memes: [Meme]
  votes: [Vote]
}
input ReferenceInput {
  _id: String!
}
input UserCreateInput {
  name: String
  wallet: String
}

type Meme {
  _id: String!
  name: String
  owner: User
  nft: String
  votes: [Vote]
  price: Float
}

input MemeCreateInput {
  name: String
  owner: ReferenceInput
  nft: String
  price: Float
}

type Vote {
  _id: String!
  meme: Meme!
  user: User!
}

input VoteCreateInput {
  meme: ReferenceInput!
  user: ReferenceInput!
}

type Query {
  votes: [Vote]
  users: [User]
  memes: [Meme]
}

type Mutation {
  createVote(vote: VoteCreateInput!): String
  createUser(user: UserCreateInput!): String
  createMeme(meme: MemeCreateInput!): String

  deleteMeme(id: String!): Boolean
  deleteUser(id: String!): Boolean
  deleteVote(id: String!): Boolean
}

type Subscription {
  memeAdded: Meme
  memeDeleted: String
  memeVoted: Meme

  voteAdded: Vote
  voteDeleted: String

  userAdded: User
  userDeleted: String
}
